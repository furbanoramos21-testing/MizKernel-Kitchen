# This is for Building the Android Kernel
# Builder v0.3 based for MizKernel v0.2 builder
# modifying to test upstream_exynos850 but now revert branch
# Note that the kernel is only Image and not Image.gz-dtb because samsung and the gz-dtb wont work on samsung


name: "Android Kernel Builder - v3 : exynos 850 test"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Select branch"
        required: true
        default: "revert"
        type: choice
        options:
          - "revert"
      device:
        description: "Select device"
        required: true
        default: "a21snsxx"
        type: choice
        options:
          - "a21snsxx"
      # nuke apatch for now
      # apatch:
        # description: "Apply APatch to the Kernel"
        # required: true
        # default: false
        # type: boolean
      # apatch_password:
        # description: "Password for APatch, don't forget the password or else you're locked out from root access lol"
        # required: true
        # default: "A12345678"
        # type: string
      notify_telegram_channel:
        description: "Notify the Telegram Bot (Make sure you set up the secrets with variable named: TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)"
        required: true
        default: true
        type: boolean
      use_uc_boot_template:
        description: "Use the UC Boot Template"
        required: true
        default: true
        type: boolean

permissions:
  contents: write


jobs:
  build:
    name: "Build Kernel"
    runs-on: ubuntu-22.04
    steps:
        - name: "Checkout"
          uses: actions/checkout@v2

        - name: "Set up Timezone"
          run: |
            # Only set time to Asia/Manila and NEVER ANY TZ
            # ANY SET OF TZ THAN MANILA IS A VIOLATION OF ETIQUETTE IN THE ORG
            sudo timedatectl set-timezone Asia/Manila

        - name: "Clean up Bloated Actions"
          uses: rokibhasansagar/slimhub_actions@main
          with:
            retain: "docker_imgcache,docker_buildkit,container_tools,nodejs_npm,toolcache_node"

        - name: "Set up dependencies"
          run: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install aria2 libncurses5 git python-is-python3 python2 python3 wget curl libc6-dev tar -y
            sudo apt install cpio default-jdk git-core gnupg flex bison gperf build-essential zip curl aria2 libc6-dev libncurses5-dev x11proto-core-dev libx11-dev libreadline6-dev libgl1-mesa-glx libgl1-mesa-dev python3 make sudo gcc g++ bc grep tofrodos python3-markdown libxml2-utils xsltproc zlib1g-dev -y
          
        - name: "Clone the Kernel"
          run: |
            git clone https://github.com/furbanoramos21-testing/upstream_exynos850 MizKernel
            cd MizKernel
            git checkout ${{ github.event.inputs.version }}
            cd ..
        
        # Deprecate the toolchains later since it should be the script that handles the toolchain handling now (using submodules)
        # At this variant, the unstable_ksu has already have a better toolchain handling
        - name: "Move the toolchains"
          run: |
            git clone https://github.com/Mizumo-prjkt/clang-r383902
            git clone https://github.com/Mizumo-prjkt/aarch64-linux-android-4.9-llvm
            mv clang-r383902 MizKernel/clang-r383902
            mv aarch64-linux-android-4.9-llvm MizKernel/aarch64-linux-android-4.9-llvm

        - name: "Build the kernel"
          run: |
            cd MizKernel
            export PATH=$(pwd)/clang-r383902/bin/:$PATH
            export CROSS_COMPILE=$(pwd)/aarch64-linux-android-4.9-llvm/bin/aarch64-linux-android-
            export PLATFORM_VERSION=13
            export ANDROID_MAJOR_VERSION=t
            export ARCH=arm64
            mkdir out
            make ARCH=arm64 O=out CC=$(pwd)/clang-r383902/bin/clang exynos850-${{ github.event.inputs.device }}_defconfig
            make ARCH=arm64 O=out CC=$(pwd)/clang-r383902/bin/clang -j64
            cd ..

        - name: "Pull Finished Kernel"
          run: |

            mkdir processing
            cp MizKernel/arch/arm64/boot/Image processing/Image-${{github.run_id}}
            mkdir out

        - name: "Pull Image-gz-dtb (if present) to out"
          run: |
            echo "Pulling Image-gzdtb"
            echo "If this session fails, either, it's not config in defconfig or idk where, probably in the shadow realm"
            cp MizKernel/arch/arm64/boot/Image.gz-dtb out/Image.gz-dtb
          continue-on-error: true

        # Variable fetching is disabled because it's not working

        # - name: "Variable fetching"
        #   run: |
        #     echo "IDENTIFIER=$(curl -s https://raw.githubusercontent.com/MizProject/MizKernel-GalaxyA12s/refs/heads/${{github.event.inputs.version}}/CHANGELOG | cat | tr -d '\n\r')" >> $GITHUB_ENV
        #     echo "CHANGELOG=$(curl -s https://raw.githubusercontent.com/MizProject/MizKernel-GalaxyA12s/refs/heads/${{github.event.inputs.version}}/IDENTIFIER | cat | tr -d '\n\r')" >> $GITHUB_ENV
        #     echo "DEBUG IDENT: ${{ env.IDENTIFIER }}"
        #     echo "DEBUG CLOG: ${{ env.CHANGELOG }}"


        - name: "Patch Boot Img"
          run: |
            aria2c -x 10 https://magojohnji.github.io/magiskboot-linux/x86_64/magiskboot
            chmod +x magiskboot
            sudo mv magiskboot /usr/bin/magiskboot
            sudo chmod +x /usr/bin/magiskboot
            if [ ${{ github.event.inputs.use_uc_boot_template }} == 'true' ]; then
              aria2c -x 10 https://github.com/MizProject/MizKernel-GalaxyA12s/releases/download/apatch-template/boot-uc.img
              mv boot-uc.img processing/boot.img
            else
              aria2c -x 10 https://github.com/MizProject/MizKernel-GalaxyA12s/releases/download/apatch-template/boot.img 
              mv boot.img processing/boot.img
            fi
            cd processing
            magiskboot unpack boot.img
            rm -rf kernel
            cp Image-${{github.run_id}} kernel
            magiskboot repack boot.img
            mv new-boot.img ../out/boot.img
            cp -rf kernel ../out/Image
            cd ..

        - name: "Zip it"
          run: |
            aria2c -x 10 https://github.com/MizProject/MizKernel-GalaxyA12s/releases/download/zi-template/AnyKernel-TEMPLATE.zip
            mkdir AnyKernel
            mv AnyKernel-TEMPLATE.zip AnyKernel
            cd AnyKernel
            unzip AnyKernel-TEMPLATE.zip
            rm -rf AnyKernel-TEMPLATE.zip
            rm -rf Image
            cd ..
            if [ ${{ github.event.inputs.apatch }} == 'true' ]; then
              cp processing/kernel AnyKernel/Image
            else
              cp processing/kernel AnyKernel/Image
            fi
            rm -rf AnyKernel/version
            if [ ${{ github.event.inputs.apatch }} == 'true' ]; then
              EXTRMSG=" APatch is applied"
            fi
            echo "Kernel-${{github.run_id}}" - Type: ${{github.event.inputs.version}} >> AnyKernel/version
            echo "Autogen by Github Actions" >> AnyKernel/version
            echo "Build Date: $(date)" >> AnyKernel/version

            cd AnyKernel
            zip -r MizKernel-${{github.run_id}}-twrp.zip ./*
            cd ..
            mv AnyKernel/MizKernel-${{github.run_id}}-twrp.zip out/MizKernel-${{github.run_id}}-twrp.zip
          

        - name: "To Github Artifact"
          uses: actions/upload-artifact@v4
          with:
            name: "MizKernel-${{github.run_id}}-artifacts"
            path: |
              out/boot.img
              out/Image
              out/MizKernel-${{github.run_id}}-twrp.zip
          continue-on-error: true



        - name: "Deploy to Github Release"
          uses: softprops/action-gh-release@v2
          with:
            files: |
              out/*
            name: "MizKernel - ${{github.run_id}} - ${{ github.event.inputs.version }}"
            tag_name: "${{ github.run_id }}"
            body: |
              ### Test build </br>
              
              Autogenerated by github actions

          env:
            GITHUB_TOKEN: ${{ secrets.GH_FALLBACK_TOKEN }} 


        - name: "Notify Telegram Channel"
          if: ${{ github.event.inputs.notify_telegram_channel == 'true' }}
          uses: appleboy/telegram-action@master
          with:
            to: ${{ secrets.TELEGRAM_CHAT_ID }}
            token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
            message: |
              Build Completed 
              Action ID: ${{ github.run_id }}
              Apatch: ${{ github.event.inputs.apatch }}
              Release type: ${{ github.event.inputs.version }}

        
